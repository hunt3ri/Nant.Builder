<?xml version="1.0" encoding="utf-8" ?>
<project name="BuildTargets">

	<!-- Set appropriate variables depending if this is a local or CCNet build -->
	<target name="DetermineBuild" description="">
		<property name="solution.buildspace" value="${path::combine(local.buildspace, solution.name)}" />
		<property name="buildspace.src.dir" value="${path::combine(solution.buildspace, solution.src.dir)}" />
		<property name="solution.workspace" value="${path::combine(local.workspace, solution.name)}" />
		<property name="is.release.local" value="true"/>
		<property name="azure.buildspace" value="${path::combine(buildspace.src.dir, azure.project.name)}" />

		<if test="${property::exists('CCNetLabel')}">
			<property name="is.release.local" value="false"/>
			<property name="version.tag" value="${CCNetLabel}"/>
		</if>

		<echo message="is.release.local = ${is.release.local}"/>
		<echo message="Version.tag = ${version.tag}"/>
		<echo message="solution.workspace = ${solution.workspace}" />
		<echo message="solution.buildspace = ${solution.buildspace}" />
		<echo message="buildspace.src.dir = ${buildspace.src.dir}" />
		<echo message="azure.buildspace = ${buildspace.src.dir}" />
	</target>



	<!-- Ensure clean project assembly workspace directory for local builds -->
	<target name="CleanLocalBuildspace">
		<echo message="Deleting dir ${solution.buildspace}"/>
		<delete dir="${solution.buildspace}"/>
		<mkdir dir="${solution.buildspace}" />
	</target>

	<!-- Copy files to build space -->
	<target name="AssembleFromWorkspace" depends="CleanLocalBuildspace">
		<echo message="Assemble from workspace ${solution.workspace} to ${solution.buildspace}"/>
		<copy todir="${solution.buildspace}"  includeemptydirs="false">
			<fileset basedir="${solution.workspace}">
				<include name="**/*" />
				<exclude name="**/packages/**" />
				<exclude name="**/bin/**"/>
				<exclude name="**/obj/**"/>
				<exclude name="*/Release/**" />
				<exclude name="*/Debug/**" />
				<exclude name="**/.git/**" />
				<exclude name="TestResults/**"/>
				<exclude name="**/*.user" />
			</fileset>
		</copy>
	</target>



	<!-- Update each project's assemblyinfo.cs file with version number and company info etc -->
	<target name="UpdateAssemblyInfo">

		<foreach item="String" in="${solution.projects}" delim="," property="assembly.project.name">

			<property name="src.dir" value="${path::combine(buildspace.src.dir, assembly.project.name)}" />
			<property name="assemblyinfo.cs" value="${path::combine(src.dir, 'Properties\AssemblyInfo.cs')}" />

			<call target="CreateAssemblyInfo"/>

		</foreach>
	</target>

	<!-- Create new AssemblyInfo file with version number and company info-->
	<target name="CreateAssemblyInfo">

		<echo message="Creating assembly file: ${assemblyinfo.cs}" />

		<asminfo output="${assemblyinfo.cs}"  language="CSharp">
			<imports>
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.CompilerServices" />
				<import namespace="System.Runtime.InteropServices" />
			</imports>
			<attributes>
				<attribute type="AssemblyTitleAttribute" value="${assembly.project.name}" />
				<attribute type="AssemblyDescriptionAttribute" value="" />
				<attribute type="AssemblyConfigurationAttribute" value="" />
				<attribute type="AssemblyCompanyAttribute" value="${company.name}" />
				<attribute type="AssemblyProductAttribute" value="${assembly.project.name}" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright (c) ${company.name} ${datetime::get-year(datetime::now())}" />
				<attribute type="AssemblyTrademarkAttribute" value="" />
				<attribute type="AssemblyCultureAttribute" value="" />
				<attribute type="ComVisibleAttribute" value="false" />

				<attribute type="AssemblyVersionAttribute" value="${version.tag}" />
				<attribute type="AssemblyFileVersionAttribute" value="${version.tag}" />
			</attributes>
		</asminfo>
	</target>



	<target name="CompileSolution" description="Compiles and packages the solution ready for MsDeploy">
		<echo message="Compiling soultion: ${solution.buildspace}\${solution.name} with configuration: ${release.configuration}"/>
		<exec program="${msbuild4.exe}">
			<arg value="${solution.buildspace}\${solution.name}.sln" />
			<arg value="/p:Configuration=${release.configuration}" />
			<arg value="/p:DeployOnBuild=true"/>
			<arg value="/p:DeployTarget=Package"/>
			<arg value="/p:AutoParameterizationWebConfigConnectionStrings=false" if="${create.azure.package}" />
			<!--This flag must be set to false on azure builds-->
			<arg value="/p:WarningLevel=4" />
			<arg value="/p:TreatWarningsAsErrors=true"/>
			<arg value="/v:m" />
		</exec>
	</target>
	
	
	<target name="RunNunitTests">
		<foreach item="String" in="${test.project.names}" delim="," property="test.project.name">
			<echo message="Running Nunit tests for ${test.project.name}"/>
			<exec program="${nunit-console.exe}">
				<arg value="${buildspace.src.dir}/${test.project.name}/bin/${release.configuration}/${test.project.name}.dll" />
				<arg value="/xml=${buildspace.src.dir}/${test.project.name}/bin/${release.configuration}/${test.project.name}-results.xml" />
			</exec>
		</foreach>
	</target>

	
	<loadtasks assembly="${local.workspace}/${solution.name}/packages/FluentMigrator.Tools.1.0.3.0/tools/AnyCPU/40/FluentMigrator.NAnt.dll" if="${run.db.migrations}" />
	<target name="RunDbMigrations" description="Migrate the database to the latest version">
		<migrate
	    	database="sqlserver2008"
	    	connection="${connection.string}"
	    	target="${buildspace.src.dir}/${migrations.project.name}/bin/${release.configuration}/${migrations.project.name}.dll"
		/>
	</target>


	<target name="RollbackDbMigrations" description="Migrates the database back to specified version">
		<migrate
	    	database="sqlserver2008"
	    	connection="${connection.string}"
	    	target="${buildspace.src.dir}/${migrations.project.name}/bin/${release.configuration}/${migrations.project.name}.dll"
			task="migrate:down"
			to="${rollback.to.version}"
		/>
	</target>

	<target name="CreateAzurePackage" description="Creates package for uploading to Azure">
		<property name="package.dir" value ="${buildspace.src.dir}/${azure.role.project.name}/obj/${release.configuration}/Package/PackageTmp/"/>

		<echo message="Executing cspack for ${solution.name}, with following arguments:"/>
		<echo message="/role: ${azure.role.project.name};${package.dir} "/>
		<echo message="/rolePropertiesFile:${azure.role.project.name};.\AzureRoleProperties.txt" />
		<echo message="/sitePhysicalDirectories:${azure.role.project.name};Web;${package.dir}"/>
		<echo message="/out:${azure.buildspace}/${solution.name}-${release.configuration}-${version.tag}.cspkg"/>
		<echo></echo>

		<!--Create AzureRoleProperties file-->
		<touch file="AzureRoleProperties.txt" />
		<echo file="AzureRoleProperties.txt" message="TargetFrameWorkVersion=v4.0 &#xa;" />
		<echo file="AzureRoleProperties.txt" append="true" message="EntryPoint=${azure.role.project.name}.dll" />

		<exec program="${cspack.exe}">
			<arg value="${azure.buildspace}/ServiceDefinition.csdef" />
			<arg value="/role:${azure.role.project.name};${package.dir}"/>
			<arg value="/rolePropertiesFile:${azure.role.project.name};.\AzureRoleProperties.txt"/>
			<arg value="/sitePhysicalDirectories:${azure.role.project.name};Web;${package.dir}"/>
			<arg value="/out:${azure.buildspace}/${solution.name}-${release.configuration}-${version.tag}.cspkg"/>
		</exec>

		<!--TODO add release configs-->
		<echo message="Copy Azure package from ${azure.buildspace} to ${local.releasespace}/${solution.name}"/>
		<copy todir="${local.releasespace}/${solution.name}" verbose="true" includeemptydirs="false">
			<fileset basedir="${azure.buildspace}">
				<include name="**/*.cspkg" />
				<include name="**/${azure.service.config.file}" />
				<exclude name="**/*.csdef"/>
				<exclude name="**/bin/**"/>
			</fileset>
		</copy>
	</target>

	<target name="ParseSubscriptionDetails">
		<xmlpeek file="${azure.subscription.credentials.file}"
				 property="azure.subscription.id"
				 xpath="//x:Subscriptions/x:Subscription/x:SubscriptionId">
			<namespaces>
				<namespace prefix="x" uri="urn:Microsoft.WindowsAzure.Samples.ManagementTools.PowerShell:WaPSCmdlets" />
			</namespaces>
		</xmlpeek>

		<xmlpeek file="${azure.subscription.credentials.file}"
				 property="azure.thumbprint"
				 xpath="//x:Subscriptions/x:Subscription/x:Thumbprint">
			<namespaces>
				<namespace prefix="x" uri="urn:Microsoft.WindowsAzure.Samples.ManagementTools.PowerShell:WaPSCmdlets" />
			</namespaces>
		</xmlpeek>
	</target>

	<target name="DeployAzurePackage" depends="ParseSubscriptionDetails" description="Deploys your Azure package to the Cloud :-)">

		<exec program="${powershell.exe} ">
			<arg value=".\DeployAzureApp.ps1" />
			<arg value="-environment ${azure.deployment.environment}" />
			<arg value="-serviceName ${azure.hosted.service.name}"/>
			<arg value="-thumbprint ${azure.thumbprint}"/>
			<arg value="-subscriptionId '${azure.subscription.id}'"/>
			<arg value="-storageAccountName ${azure.storage.account.name}"/>
			<arg value="-packageLocation ${local.releasespace}\${solution.name}\${solution.name}-${release.configuration}-${version.tag}.cspkg" />
			<arg value="-cloudConfigLocation ${local.releasespace}\${solution.name}\${azure.service.config.file}" />
		</exec>
	</target>

</project>