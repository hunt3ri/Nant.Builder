<?xml version="1.0" encoding="utf-8" ?>

<!-- See my blog posts here, for further documentation on how to use Nant.Builder: 
     http://iainhunter.wordpress.com/2012/05/11/automating-visual-studio-2010-builds-and-deployments-with-nant-builder/ 
	 http://iainhunter.wordpress.com/2012/05/28/visual-studio-turbo-diy-appharbor-with-nant-builder/
	 -->
<project default="buildRelease" basedir=".">

	<!-- IMPORTANT PLEASE SET THESE VALUES APPROPRIATELY FOR YOUR ENVIRONMENT IN GLOBALBUILDSETTINGS.XML.  If you use NantBuilder 
	     on multiple projects you can share the file between multiple projects, by referencing the file, eg c:\dev\globalbuildsettings.xml-->
	<include buildfile="GlobalBuildSettings.xml" />

	<!--The name of your solution, please overwrite the default -->
	<property name="solution.name" value="Nant.Builder.Sample"/>

	<!-- Comma seperated list of projects contained in your solution, DO NOT include Azure or Build projects, these should be projects 
	     containing Assembly.Info files, so they get appropriately versioned.-->
	<property name="solution.projects" value="Nant.Builder.Sample.Services,Nant.Builder.Sample.Tests,Nant.Builder.Sample.Web" />

	<!-- Set the configuration for compilation, typically release, but may be custom -->
	<property name="release.configuration" value="Release" />

	<!-- Manually set version, if using CCNet this will be overwritten later -->
	<property name="version.tag" value="1.0.0.1"/>
	<property name="company.name" value="iainhunter.wordpress.com" />

	<!-- If your projects reside in a different directory from the .sln file specify here, or leave empty if not -->
	<property name="solution.src.dir" value="src" />

	<!--Nunit Test Settings-->
	<property name="run.nunit.tests" value="false" />
	<!--The name of the project containing your Nunit tests-->
	<property name="tests.project.name" value="Nant.Builder.Sample.Tests" />
	
	<!--Azure Settings-->

	<!-- Packaging -->
	<property name="create.azure.package" value="false" />
	<!--The name of the project containing the Azure csdef, cscfg files-->
	<property name="azure.project.name" value="Nant.Builder.Sample.Azure" />
	<!-- This is the name of the project containing your app entry point, probably the Web project, but may be a library if using a worker role-->
	<property name="azure.role.project.name" value="Nant.Builder.Sample.Web" />
	<!-- The name of the file containing the azure config for your app, default is .Cloud but may be custom if you have multiple configs, eg test, live etc -->
	<property name="azure.service.config.file" value="ServiceConfiguration.Cloud.cscfg" />

	<!-- Deployment -->
	<property name="deploy.azure.package" value="false" />
	<!-- The name of the file containing your exported subcription details - IMPORTANT keep this file safe as it contains very sensitive credentials about your Azure sub -->
	<property name="azure.subscription.credentials.file" value="C:\dev\tools\WindowsAzure\Subscriptions\yoursub.xml"/>
	<!-- The name of a azure hosted service where you want to deploy your app-->
	<property name="azure.hosted.service.name" value="yourservicename" />
	<!-- The environment type either Staging or Production-->
	<property name="azure.deployment.environment" value="staging"/>
	<!-- The name of a storage account that exists on your subscription, this will be used to temporarily load your app into while it's being deploed-->
	<property name="azure.storage.account.name" value="yourstorageaccount"/>



	<!-- This target controls the build-->
	<target name="buildRelease" description="Build the release, and run integration tests">

		<call target="DetermineBuild" />
		<call target="AssembleFromWorkspace" if="${is.release.local}"/>

		<call target="UpdateAssemblyInfo" />

		<call target="CompileSolution" /> 
		
		<call target="RunNunitTests" if="${run.nunit.tests}" />
		
		<call target="CreateAzurePackage" if="${create.azure.package}" />

		<!--We can only deploy package if we've packaged it in the first place-->
		<if test="${deploy.azure.package and deploy.azure.package}"  >
			<call target="DeployAzurePackage" />
		</if>
	</target>

	<!--Load BuildTargets-->
	<include buildfile="BuildTargets.xml" />

</project>